#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Simple check script for lifter-data/social-media.csv
# and assorted files that get compiled into "lifters.csv".
#
# Used as part of "make check".
#

import sys,os
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))) ,"scripts"))

import oplcsv
from usernames import get_username


def redden(s):
    if os.name != 'nt':
        return "\033[1;31m" + s + "\033[0;m"
    else: 
        return s

def enyellow(s):
    if os.name != 'nt':
        return "\033[1;33m" + s + "\033[0;m"
    else: 
        return s
hitError = False  # Determines return value at end.

def perror(s):
    global hitError
    hitError = True
    print(' ' + redden(s), file=sys.stderr)

def pwarning(s):
    print(' ' + enyellow(s), file=sys.stderr)


def is_ascii(s):
    return len(s) == len(s.encode())


def get_database_nameset():
    names = set()

    for dirname, subdirs, files in os.walk(os.getcwd()):
        if not 'entries.csv' in files:
            continue

        csv = oplcsv.Csv(dirname + os.sep + 'entries.csv')
        if 'Name' in csv.fieldnames:
            nameidx = csv.index('Name')
            for row in csv.rows:
                names.add(row[nameidx])

    return names



def check_social_media(names):
    filename = 'social-media.csv'
    csv = oplcsv.Csv('lifter-data' + os.sep + filename)

    # Check columns.
    if len(csv.fieldnames) == 0:
        perror("%s: No columns found." % filename)
    if len(csv.fieldnames) >= 1 and csv.fieldnames[0] != "Name":
        perror("%s: First column must be 'Name'." % filename)
    if len(csv.fieldnames) >= 2 and csv.fieldnames[1] != "Instagram":
        perror("%s: Second column must be 'Instagram'." % filename)
    if len(csv.fieldnames) >= 3:
        perror("%s: Too many columns." % filename)

    lifters = set()
    instagrams = set()

    try:
        nameidx = csv.index('Name')
        instagramidx = csv.index('Instagram')
    except:
        return 1

    # Check rows.
    for row in csv.rows:
        if len(row) != len(csv.fieldnames):
            perror("%s: Improper number of columns in row %s." % (filename,row))

        # Check for whitespace problems.
        for x in row:
            if x.strip() != x:
                perror("%s: Extraneous whitespace in '%s.'" % (filename,x))
            if x.replace('  ',' ') != x:
                perror("%s: Too much spacing in '%s'." % (filename,x))
            if x.strip() == '':
                perror("%s: Blank column in row %s." % (filename,row))

        # Prevent duplicate lifters.
        if row[nameidx] in lifters:
            perror("%s: Duplicate entry for lifter '%s'." % (filename,row[nameidx]))
        else:
            lifters.add(row[nameidx])

        # Prevent duplicate instagrams.
        if row[instagramidx] in instagrams:
            perror("%s: Instagram used by two different lifters: '%s'." \
                   % (filename,row[instagramidx]))
        else:
            instagrams.add(row[instagramidx])

        # Make sure that every name occurs in the 'names' set.
        if not row[nameidx] in names:
            perror("%s: Lifter does not exist in database: '%s'." \
                   % (filename,row[nameidx]))


# Check (Name => Username) automatic compilation for duplicate entries.
# Duplicates need to be eliminated by forcibly overriding a name.
def check_usernames(names):
    usernames = dict()
    for name in names:
        username = get_username(name)
        if not username:
            perror('No username generated for Name "%s".' % name)
        elif not username[0].isalpha():
            perror('Username "%s" must start with a letter.' % username)
        elif not is_ascii(username):
            perror("Username is not ASCII: '%s'. Teach scripts/username.py." % username)

        if username in usernames:
            perror('Multiple users with username %s: "%s", "%s".' % (username, name,
                   usernames[username]))
        else:
            usernames[username] = name


def check_name_corrections(names):
    filename = 'name-corrections.dat'
    seenset = set() # Names seen in the file so far.

    fd = open('lifter-data' + os.sep + filename,encoding='utf-8')
    for line in fd:
        variants = line.rstrip('\n').split(',')

        # Check that the "correct" variant is actually in the database.
        if not variants[0] in names:
            pwarning("%s: Lifter '%s' not in database." % (filename, variants[0]))

        for variant in variants:
            # Check for whitespace errors.
            if variant.strip() != variant or '  ' in variant:
                perror("%s: Extraneous whitespace for '%s'." % (filename, variant))

            # Check for duplicate names.
            if variant in seenset:
                perror("%s: Name appears more than once: '%s'." % (filename, variant))
            seenset.add(variant)

    fd.close()


def check_name_disambiguation(names):
    filename = 'name-disambiguation.csv'
    csv = oplcsv.Csv('lifter-data' + os.sep + filename)

    # Names seen in the file so far.
    # Stored as a map of Name => Count for use further below.
    seenset = {}

    if ','.join(csv.fieldnames) != "Name,Count":
        perror("%s: CSV column names are wrong.", filename)
        return

    # Names with variants in the disambiguation file should occur in meet files.
    for (name, count) in csv.rows:
        # Each name can only occur once.
        if name in seenset:
            perror("%s: Name '%s' occurs more than once.", (filename, name))

        # That name cannot have a '#' in it.
        if '#' in name:
            perror("%s: Name '%s' cannot contain the character '#'." % (filename, name))

        # Count must be a number.
        if not count.isdigit():
            perror("%s: Count must be an integer.", filename)
            continue

        # That number must be >= 2.
        if not int(count) >= 2:
            perror("%s: Count must be >= 2.", filename)
            continue

        # The un-specified name should not occur without a number.
        if name in names:
            # Just use a warning, to avoid making meets really annoying to enter.
            pwarning("Lifter '%s' needs disambiguation in some meet data." % name)

        # All the variants of that name should be accounted for.
        for k in range(1, int(count) + 1):
            variant = "%s #%u" % (name, k)

            if not variant in names:
                perror("%s: No lifter named '%s' in any meets." % (filename, variant))

        seenset[name] = int(count)

    # Names with variants in meet files should be valid by the disambiguation file.
    for name in filter(lambda x: '#' in x, names):
        (part,index) = name.split('#')
        part = part.rstrip() # Remove the space before the '#'.

        if not part in seenset:
            perror("%s: Name '%s' occurs in some meet, but isn't marked for disambiguation." % (filename, name))
        else:
            count = seenset[part]
            if int(index) > int(count):
                perror("%s: Name '%s' occurs in a meet, but only %s variants are known." % (filename, name, count))


def main():
    global hitError

    # Get a list of all the Name entries throughout the whole project.
    names = get_database_nameset()

    check_social_media(names)
    check_usernames(names)
    check_name_corrections(names)
    check_name_disambiguation(names)

    if hitError:
        return 1
    return 0

if __name__ == '__main__':
    if len(sys.argv) != 1:
        print(" Usage: %s" % sys.argv[0])
        sys.exit(1)
    sys.exit(main())
