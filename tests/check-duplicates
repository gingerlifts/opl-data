#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Creates a dictionary of lifter performances and finds
# any possible duplicate meets.
import sys
import os

try:
    import oplcsv
except ModuleNotFoundError:
    sys.path.append(os.path.join(os.path.dirname(
        os.path.dirname(os.path.realpath(__file__))), "scripts"))
    import oplcsv


# Hashtable for total lookup.
# str -> [str, str] (totalKg, meetpath).
MeetHash = {}

###############################################

errorCount = 0
warningCount = 0


def redden(s):
    if os.name != 'nt':
        return "\033[1;31m" + s + "\033[0;m"
    return s


def enyellow(s):
    if os.name != 'nt':
        return "\033[1;33m" + s + "\033[0;m"
    return s


def perror(s):
    global errorCount
    errorCount += 1
    print(' ' + redden(s), file=sys.stderr)


def pwarning(s):
    global warningCount
    warningCount += 1
    print(' ' + enyellow(s), file=sys.stderr)

###############################################

# Given a name like "/home/foobar/dev/openpowerlifting/meet-data/apf/1503/entries.csv",
# returns a name like "apf/1503".


def prettify_path(path):
    # Only include things after "/meet-data/".
    try:
        idx = path.index('/meet-data/') + len('/meet-data/')
        path = path[idx:]
    except ValueError:
        pass
    return path.rstrip('/entries.csv')


def check_duplicates(entriespath, meetpath):
    global MeetHash

    entriescsv = oplcsv.Csv(entriespath)
    meetcsv = oplcsv.Csv(meetpath)

    dateidx = meetcsv.index('Date')
    meetdate = meetcsv.rows[0][dateidx]

    nameidx = entriescsv.index('Name')
    totalidx = entriescsv.index('TotalKg')

    for row in entriescsv.rows:
        name = row[nameidx]
        total = row[totalidx]

        name_date = name + meetdate

        if name_date not in MeetHash:
            MeetHash[name_date] = (total, entriespath)
        elif (total != '' and MeetHash[name_date][0] == total and
                MeetHash[name_date][1] != entriespath):
            left = prettify_path(MeetHash[name_date][1])
            right = prettify_path(entriespath)
            pwarning("Duplicate meets: %s, %s." % (left, right))
            break


def main():
    for dirname, subdirs, files in os.walk(os.getcwd()):
        if 'entries.csv' in files:
            entriespath = dirname + os.sep + 'entries.csv'
            meetpath = dirname + os.sep + 'meet.csv'
            check_duplicates(entriespath, meetpath)

    print("Summary: %u errors, %u warnings." % (errorCount, warningCount))
    if errorCount > 0:
        sys.exit(1)


if __name__ == '__main__':
    main()
