#!/usr/bin/env python3
# Given a results.csv as outputted by rpu-parse, parse each sheet one at a time
# and join all the sheets together into an OpenPowerlifting-formatted CSV file.

import sys

sys.path.append('../../scripts')
sys.path.append('scripts')
import oplcsv
import re

def die(s):
    print(s, file=sys.stderr)
    sys.exit(1)


# Given the array of lines, split it up into an array per-sheet.
def split_by_sheet(lines):
    # Skip past the overview.
    for i in range(len(lines)):
        if 'Sheet' in lines[i][0]:
            break
    assert i < len(lines)
    assert 'Sheet' in lines[i][0]

    sheetlist = []
    sheet = None

    for line in lines[i:]:
        # If this line starts a new sheet, generate a new array.
        if 'Sheet' in line[0]:
            sheet = []
            sheetlist.append(sheet)
        sheet.append(line)

    return sheetlist


# Find the line that contains column information (the line below does also).
def get_header_linenum(sheet):
    for ii in range(len(sheet)):



    die("get_header_linenum() failed to find the header.")




def parse_fieldnames(sheet):
    fieldnames = []

    headernum = get_header_linenum(sheet)


    header = sheet[headernum]
    # Name all the columns.
    iterable = iter(range(len(header)))

    for i in iterable:
        text = header[i].lower().replace('.','')


        else:
            print(header)
            die('Fix parse_fieldnames(): Unknown column header text: "%s"' % text)

    return fieldnames


# Given a list of lines all of which belong to the same sheet, parse that
# into an OpenPowerlifting-style CSV.
def parse_sheet(sheet):
 
    return csv


# Handles the Division-Age column, which looks like below:
#   Открытая 20-23 (21.11.1986)/30
# Converts to English and separates into Division and Age columns.
def standardize_division_age(csv):
    

#Mark DQs properly and make sure that place is an integer.
def cleanup_place(csv):

        
def unreverse_names(csv):


#Names sometimes have something in brackets after them - extra divisions maybe?
def cleanup_names(csv):


def cleanup_lift(csv, fieldname):
    


#Remove '.0' from weightclasses
def cleanup_weightclass(csv):


#Sometimes weight class is also given after bodyweight
def cleanup_bodyweight(csv):




def main(filename):
    # Since the input is comma-separated, store the file as a list of lists.
    with open(filename) as fd:
        lines = [x.strip().split(',') for x in fd.readlines()]

    # Split the input filename into sheets, each of which is an independent CSV.
    sheetlist = split_by_sheet(lines)

    # Parse each sheet independently, then join them all together into a single CSV.
    csv = oplcsv.Csv()
    for sheet in sheetlist:
        sheetcsv = parse_sheet(sheet)
        csv.cat(sheetcsv)

    for x in ['Squat1Kg', 'Squat2Kg', 'Squat3Kg','Squat4Kg', 'Bench1Kg', 'Bench2Kg', 'Bench3Kg','Bench4Kg',
            'Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg','Deadlift4Kg', 'TotalKg']:
        cleanup_lift(csv, x)


    # Now it's time to standardize the CSV a little bit!
    # We have some temporary columns hanging out.
    standardize_division_age(csv)
    cleanup_place(csv)
    cleanup_names(csv)
    cleanup_weightclass(csv)
    cleanup_bodyweight(csv)

    csv.write(sys.stdout)
    return 0


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(" Usage: %s results.csv > entries.csv" % sys.argv[0])
        sys.exit(1)
    sys.exit(main(sys.argv[1]))
