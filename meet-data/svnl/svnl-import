#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Import data from the SVNL website.

from bs4 import BeautifulSoup
import errno
from oplcsv import Csv
import os
import sys
import urllib.request
import re


def gethtml(url):
    with urllib.request.urlopen(url) as r:
        return r.read().decode('utf-8')


def error(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


# URL will be like "tulokset/sm-kilpailut/16-18032018-klassinen-voimanosto-sm-ylojarvi-ylor".
def getdirname(url):
    return url.split('/')[-1]


def getmeetinfo(soup):
    csv = Csv()
    csv.fieldnames = ['Federation', 'Date', 'MeetCountry',
                      'MeetState', 'MeetTown', 'MeetName']

    # Get the facts table.
    tbody = soup.find('tbody')
    if len(tbody) == 0:
        error("Couldn't find the results table.")

    trs = tbody.find_all('tr')


    name = trs[1].text.strip()

    #Name is sometimes split across two lines,
    # this is a somewhat hacky way of finding the date-line
    if trs[2].text.count('.') > 1:
        # Get the place & date.
        place_date = trs[2].text.strip()
    else:
        name = name + ' ' + trs[2].text.strip()
        place_date = trs[3].text.strip()
       

    [place,dotdate] = place_date.split(',')

    place=place.strip()


    # The date is formatted as dd.-dd.mm.yyyy.
    assert '.' in dotdate

    #Remove the second day
    dotdate = re.sub('\.-.*?(?=\.)','',dotdate)

    [day, month, year] = dotdate.split('.')
    if len(day) ==1:
        day = '0'+day
    if len(month)==1:
        month = '0'+month
    date = '%s-%s-%s' % (year.strip(), month.strip(), day.strip())


    fed = 'SVNL'
    country = 'Finland'
    state = ''

    row = [fed, date, country, state, place, name]
    for i, r in enumerate(row):
        row[i] = r.replace(',', ' ').replace('  ', ' ').strip()
    csv.rows = [row]

    return csv


def getresults(soup):
    csv = Csv()

    # Get the results table.
    tbody = soup.find('tbody')
    if len(tbody) == 0:
        error("Couldn't find the results table.")


    trs = tbody.find_all('tr')
    
    divstate = 'Open'
    sexstate = None
    for tr in trs[5:]:
        text = [x.text for x in tr.find_all('td')]

        # Skip blank rows
        if ''.join(text).strip() == '':
            continue

        # Records are after data
        if text[0] == 'EnnÃ¤tykset':
            break



        if text[0] == 'Sij.' and csv.fieldnames ==[]: #Header

            # Get column information.
            csv.fieldnames = []
            for h in text:
                if h == 'Sij.':
                    csv.fieldnames += ['Place']
                elif h == 'Sarja':
                    csv.fieldnames += ['WeightClassKg']
                elif h == 'Paino':
                    csv.fieldnames += ['BodyweightKg']
                elif h == 'Nimi':
                    csv.fieldnames += ['Name']
                elif h == 'SV':
                    csv.fieldnames += ['BirthYear']
                elif h == 'Seura':
                    csv.fieldnames += ['Team']
                elif h == 'JK1':
                    csv.fieldnames += ['Squat1Kg']
                elif h == 'JK2':
                    csv.fieldnames += ['Squat2Kg']
                elif h == 'JK3':
                    csv.fieldnames += ['Squat3Kg']
                elif h == 'JK tul':
                    csv.fieldnames += ['BestSquatKg']
                elif h == 'PP1' or h == 'PP1.':
                    csv.fieldnames += ['Bench1Kg']
                elif h == 'PP2' or h == 'PP2.':
                    csv.fieldnames += ['Bench2Kg']
                elif h == 'PP3' or h == 'PP3.':
                    csv.fieldnames += ['Bench3Kg']
                elif h == 'PP tul':
                    csv.fieldnames += ['BestBenchKg']
                elif h == 'MN1':
                    csv.fieldnames += ['Deadlift1Kg']
                elif h == 'MN2':
                    csv.fieldnames += ['Deadlift2Kg']
                elif h == 'MN3':
                    csv.fieldnames += ['Deadlift3Kg']
                elif h == 'MN tul':
                    csv.fieldnames += ['BestDeadliftKg']        
                elif h == 'YT' or h == 'Tulos':
                    csv.fieldnames += ['TotalKg']
                elif h == 'Wilks' or h =='Wpist.':
                    csv.fieldnames += ['Wilks']
                elif h == 'J.pist.' or h == 'Jpist.':
                    csv.fieldnames += ['Points'] 
                else:
                    error("Unknown column name: \"%s\"" % h)

            # These columns are added from the category rows.
            csv.fieldnames += ['Division', 'Sex']

            append_eqp = False
            # Classic meets and pre 2011 meets won't mark equipment, work it out contextually
            if 'Equipment' not in csv.fieldnames:
                csv.fieldnames += ['Equipment']
                append_eqp = True

        elif len(text)==1: # Division

            # Extract sex information.
            div_text = text[0].lower()
            if 'naiset' in text:
                sexstate = 'F'
                div_text = div_text.replace('naiset', '').strip()
            elif 'miehet' in text:
                sexstate = 'M'
                div_text = div_text.replace('miehet', '').strip()
            elif div_text[0] == 'n':
                sexstate = 'F'
                div_text = div_text[1:]                    
            elif div_text[0] == 'm':
                sexstate = 'M'
                div_text = div_text[1:]

            # Extract division information.
            if '14' in div_text:
                divstate = div_text.replace('14', 'Under 14')
            elif '18' in div_text:
                divstate = div_text.replace('18', 'Under 18')
            elif '23' in div_text:
                divstate = div_text.replace('23', 'Under 23')
            elif '40' in div_text:
                divstate = div_text.replace('40', 'Over 40')
            elif '50' in div_text:
                divstate = div_text.replace('50', 'Over 50')
            elif '60' in div_text:
                divstate = div_text.replace('60', 'Over 60')
            elif '70' in div_text:
                divstate = div_text.replace('70', 'Over 70')
            elif 'avoin' in div_text:
                divstate = 'Open'
            elif len(div_text) !=0:
                error("Unknown state: \"%s\"" % row[0])
        elif text[0] != 'Sij.': # Lifter data
            assert sexstate
        

            # Accumulate the row, but we need to look at the class of each td
            # to figure out whether lifts were good or bad.
            lifter_data = []
            for td in tr.find_all('td'):
                col_text = td.text
                # Switch to dots for decimals
                col_text=col_text.replace(',','.')
                s = td.s
                if s:  # Failed lift.
                    col_text = '-' + col_text
                if col_text == '-----':  # Skipped lift.
                    col_text = ''
                lifter_data.append(col_text.strip().replace('  ', ' ').replace(',', ' '))

            lifter_data = lifter_data + [divstate, sexstate]

            if append_eqp:
                lifter_data = lifter_data +['']
            csv.rows += [lifter_data]

    return csv


# The place is reported as "1.", just remove the period.
def fixplace(csv):
    placeidx = csv.index('Place')
    totalidx = csv.index('TotalKg')
    for row in csv.rows:
        row[placeidx] = row[placeidx].replace('.', '')
        if row[placeidx] == '-':
            row[placeidx] = 'DQ'
            row[totalidx] = ''  # Instead of a zero.
        elif row[placeidx].lower() == 'gj':  # Guest lifter, I think.
            row[placeidx] = 'G'

# The equipment is marked as "*" for Raw, or nothing for Single-ply.
def fixequipment(csv, meetcsv):
    meet_name = meetcsv.rows[0][5]

    raw_meet = False

    if 'klassisen' in meet_name.lower():
        raw_meet = True

    eqidx = csv.index('Equipment')

    for row in csv.rows:
        if raw_meet:
            row[eqidx] = 'Raw'
        else:
            if 'x' in row[eqidx]:
                row[eqidx] = 'Raw'
            elif row[eqidx] == '':
                row[eqidx] = 'Single-ply'
            else:
                error("Unknown equipment: \"%s\"" % row[eqidx])


# Attempts are sometimes given, but not the BestSquatKg columns, etc.
def calc_best_lift(csv, col, attemptlist):
    if col in csv.fieldnames:
        return

    for k in attemptlist:
        assert k in csv.fieldnames

    csv.insert_column(csv.index(attemptlist[-1]) + 1, col)

    for row in csv.rows:
        best = 0
        for k in attemptlist:
            try:
                attempt = float(row[csv.index(k)])
            except ValueError:
                attempt = 0
            if attempt > best:
                best = attempt
        if best > 0:
            row[csv.index(col)] = str(best)


def markevent(csv):
    assert 'Event' not in csv.fieldnames
    csv.append_column('Event')

    evtidx = csv.index('Event')

    def getevtindices(csv, fieldl):
        indexlist = []
        for f in fieldl:
            try:
                indexlist.append(csv.index(f))
            except ValueError:
                pass
        return indexlist

    squatidxl = getevtindices(
        csv, ['Squat1Kg', 'Squat2Kg', 'Squat3Kg', 'BestSquatKg'])
    benchidxl = getevtindices(
        csv, ['Bench1Kg', 'Bench2Kg', 'Bench3Kg', 'BestBenchKg'])
    deadliftidxl = getevtindices(
        csv, ['Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg', 'BestDeadliftKg'])

    for row in csv.rows:
        evt = ''
        for i in squatidxl:
            if row[i] != '':
                evt = evt + 'S'
                break
        for i in benchidxl:
            if row[i] != '':
                evt = evt + 'B'
                break
        for i in deadliftidxl:
            if row[i] != '':
                evt = evt + 'D'
                break
        row[evtidx] = evt


def remove_empty_cols_ignore_fieldname(csv):
    def iscolempty(csv, i):
        for row in csv.rows:
            if row[i]:
                return False
        return True

    def getemptyidx(csv):
        for i, col in enumerate(csv.fieldnames):
            if iscolempty(csv, i):
                return i
        return -1

    while True:
        idx = getemptyidx(csv)
        if idx == -1:
            return
        csv.remove_column_by_index(idx)


def main(url):

    # Get the results page from the page linked in the lists
    results_url = url.replace('tulokset/kansalliset-kilpailut/','')
    results_url = results_url.replace('tulokset/arvokilpailut/','')
    results_url = results_url.replace('tulokset/sm-kilpailut/','')
    html = gethtml(results_url)

    soup = BeautifulSoup(html, 'html.parser')

    meetcsv = getmeetinfo(soup)
    dirname = getdirname(url)
    entriescsv = getresults(soup)
    if len(entriescsv.rows) == 0:
        error("No rows found!")

    fixplace(entriescsv)
    fixequipment(entriescsv,meetcsv)

 
    remove_empty_cols_ignore_fieldname(entriescsv)

    # Wilks will be automatically calculated later.
    # Feds get it wrong all the time.
    if 'Wilks' in entriescsv.fieldnames:
        entriescsv.remove_column_by_name('Wilks')

    if 'Points' in entriescsv.fieldnames:
        entriescsv.remove_column_by_name('Points')

    if ('Squat1Kg' in entriescsv.fieldnames and
            'BestSquatKg' not in entriescsv.fieldnames):
        calc_best_lift(entriescsv, 'BestSquatKg', [
                       'Squat1Kg', 'Squat2Kg', 'Squat3Kg'])
    if ('Bench1Kg' in entriescsv.fieldnames and
            'BestBenchKg' not in entriescsv.fieldnames):
        calc_best_lift(entriescsv, 'BestBenchKg', [
                       'Bench1Kg', 'Bench2Kg', 'Bench3Kg'])
    if ('Deadlift1Kg' in entriescsv.fieldnames and
            'BestDeadliftKg' not in entriescsv.fieldnames):
        calc_best_lift(entriescsv, 'BestDeadliftKg', [
                       'Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg'])

    # Figure out event information.
    markevent(entriescsv)

    try:
        os.makedirs(dirname)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise
        else:
            error("Directory '%s' already exists." % dirname)

    with open(dirname + os.sep + 'entries.csv', 'w') as fd:
        entriescsv.write(fd)
    with open(dirname + os.sep + 'meet.csv', 'w') as fd:
        meetcsv.write(fd)
    with open(dirname + os.sep + 'URL', 'w') as fd:
        fd.write(url + "\n")

    print("Imported into %s." % dirname)


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: %s url" % sys.argv[0])
    main(sys.argv[1])
