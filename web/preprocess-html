#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# A very simple HTML preprocessor.
# Usage: ./preprocess file.tmpl > file.html
#
# Understands the following directives:
#   #include filename
#   #exec program arg1 arg2 ...
#
# Quotation marks don't work for specifying arguments. Don't use spaces in paths!
# Paths are relative from the web/ root, since this script is executed by the Makefile.
#

import subprocess
import sys


# Run the preprocessor over the included file as well.
def include(filename):
    main(filename)


def do_exec(program, arglist):
    try:
        p = subprocess.Popen([program] + arglist, stdout=subprocess.PIPE)
    except FileNotFoundError:
        p = subprocess.Popen(['./' + program] + arglist,
                             stdout=subprocess.PIPE)

    print(p.stdout.read().decode('utf8').rstrip())

    p.communicate()[0]  # Forces p.returncode to be set.
    rc = p.returncode
    if rc != 0:
        print("#exec directive for %s returned code %d." %
              (program, rc), file=sys.stderr)
        sys.exit(rc)


def main(filename):
    with open(filename) as fd:
        lines = fd.readlines()

    for line in lines:
        words = line.split()
        if not words:
            continue

        if words[0] == "#include":
            if len(words) != 2:
                print("Error: #include directive takes one argument.",
                      file=sys.stderr)
                sys.exit(1)
            include(words[1].strip('"'))

        elif words[0] == "#exec":
            if len(words) < 2:
                print("Error: #exec directive takes at least one argument.",
                      file=sys.stderr)
                sys.exit(1)
            do_exec(words[1], words[2:])

        else:
            print(line.rstrip())


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: %s file.tmpl > file.html" % sys.argv[0], file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1])
